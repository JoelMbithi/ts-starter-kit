generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  name      String
  phone     String
  password  String
  createdAt DateTime  @default(now())
  patients  Patient[] 
}

model Patient {
  id                        Int                 @id @default(autoincrement())
  email                     String              @unique
  name                      String
  phone                     String

  // Consent fields
  treatmentConsent          Boolean
  disclosureConsent         Boolean
  privacyConsent            Boolean

  // Personal info
  gender                    String?
  birthDate                 DateTime?

  address                   String
  occupation                String
  emergencyContactName      String
  emergencyContactNumber    String
  insuranceProvider         String
  insurancePolicyNumber     String
  allergies                 String
  currentMedication         String
  familyMedicalHistory      String
  pastMedicalHistory        String  // Fixed spelling
  
  // Identification
  identificationTypeId      Int
  identificationType        IdentificationType  @relation(fields: [identificationTypeId], references: [id])
  identificationNumber      String   
  identificationDocumentUrl String?

  // Primary Physician
  primaryPhysician          String

  createdAt                 DateTime @default(now())

  // Relations
  userId    Int
  user      User            @relation(fields: [userId], references: [id])
  appointments Appointment[] // Add this relation

  @@map("patients")
}

model Doctors {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  image        String
  appointments Appointment[] // Add this relation

  @@map("doctors")
}

model IdentificationType {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  patients Patient[] 

  @@map("identification_types")
}

model Appointment {
  id          Int       @id @default(autoincrement())
  date        DateTime
  time        String
  reason      String
  status      String    @default("scheduled") // scheduled, completed, cancelled, rescheduled
  notes       String?
  
  // Relations
  patientId   Int
  patient     Patient   @relation(fields: [patientId], references: [id], onDelete: Cascade)
  
  doctorId    Int
  doctor      Doctors   @relation(fields: [doctorId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("appointments")
}