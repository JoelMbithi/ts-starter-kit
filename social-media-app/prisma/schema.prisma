generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String  @id @default(cuid())
  email     String  @unique
  username  String  @unique
  clerkId   String  @unique
  name      String?
  bio       String?
  image     String?
  location  String?
  website   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts       Post[]
  comments    Comment[]
  likes       Like[]
  followers   Follows[] @relation("following")
  following   Follows[] @relation("follower")
  notifications        Notification[] @relation("userNotifications")
  notificationsCreated Notification[] @relation("notificationCreator")
}

model Post {
  id        String   @id @default(cuid())
  authorId  String
  content   String
  image     String?  // optional for text-only posts
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author        User          @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments      Comment[]
  likes         Like[]
  notifications Notification[]
}

model Comment {
  id        String   @id @default(cuid())
  authorId  String
  postId    String
  content   String
  notification Notification[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([authorId, postId])
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([userId, postId])
  @@unique([userId, postId])
}

model Follows {
  followerId  String
  followingId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  follower  User @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@id([followerId, followingId])
  @@index([followerId, followingId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  postId    String?
  creatorId String
  type      NotificationType
  read      Boolean  @default(false)
  commentId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user     User    @relation("userNotifications", fields: [userId], references: [id], onDelete: Cascade)
  creator  User    @relation("notificationCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  post     Post?   @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment  Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

enum NotificationType {
  LIKE
  COMMENT
  FOLLOW
}
